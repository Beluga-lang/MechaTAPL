%{
   Chapter 7 Normalization 

   Weak head normalization for simply-typed lambda calculus
   Author: Andrew Cave

This example follows the proof in the paper:

First-class substitutions in contextual type theory,
Andrew Cave and Brigitte Pientka, LFMTP'13

}%
% ---------------------------------------------------------- %
% Intrinsically Typed Lambda-Terms with one base type
LF tp : type =
| b :  tp
| arr : tp -> tp -> tp
;
%name tp T.        

LF tm : tp -> type = 
| app : tm (arr T S) -> tm T -> tm S
| lam : (tm T -> tm S) -> tm (arr T S)
| c : tm b
;
%name tm M.

% ---------------------------------------------------------- %
% Stepping Relation (Single Step)

LF step : tm A → tm A → type = 
| beta : step (app (lam M) N) (M N)
| stepapp : step M M' -> step (app M N) (app M' N)
;

% Multi-Step Relation

LF mstep : tm A -> tm A -> type = 
| refl : mstep M M
| onestep : step M M' -> mstep M' M'' -> mstep M M''
;
%name mstep S.

% ---------------------------------------------------------- %
% Values

LF val : tm A -> type = 
| val/c : val c
| val/lam : val (lam M)
;
%name val V.

% Definition of Halting: 
% A term halts when we reach a value in multiple steps
LF halts : tm A -> type = 
| halts/m : mstep M M' -> val M' -> halts M
;
%name halts H.

% ---------------------------------------------------------- %
%{

Reducibility

Reducibility cannot be directly encoded at the LF layer, since it
involves a strong, computational function space. Hence we move to the
computation layer of Beluga, and employ an indexed recursive
type. Contextual LF objects and contexts which are embedded into
computation-level types and programs are written inside `[ ]`.

The keyword stratified verifies that all negative occurrences of Reduce 
are on an index that is smaller.
}%

stratified Reduce : {A:[⊢ tp]}{M:[ |- tm A]} ctype 
 =
| I : [ |- halts M] -> Reduce [ ⊢ b ] [ |- M]
| Arr :  [ |- halts M] ->
    ({N:[ |- tm A]} Reduce [ ⊢ A] [ |- N] -> Reduce [ ⊢ B ] [ |- app M N])
  -> Reduce [ ⊢ arr A B ] [ |- M]
;

%{

In this definition, the arrows represent the usual computational
function space, not the weak function space of LF. We note that this
definition is not (strictly) positive, since `Reduce` appears to the
left of an arrow in the `Arr` case. Allowing unrestricted such
definitions destroys the soundness of our system. Here we note that
this definition is stratified by the type: the recursive occurrences
of `Reduce` are at types `A` and `B` which are smaller than `arr A B`.
`Reduce` is defined by induction on the type of the reducible
term(additionally this is why we cannot leave the type implicit).

}%

% ---------------------------------------------------------- %
% LEMMAS

%{
Now, we need to prove some more or less trivial lemmas that are
sometimes omitted in paper presentations.  
}%

rec halts_step : {S:[ |- step M M']} [ |- halts M'] -> [ |- halts M] =
/ total (halts_step) /
 mlam S ⇒ fn h => 
let [ |- halts/m MS' V] = h in
 [ |- halts/m (onestep S MS') V]
;

%{

Backwards Closed Lemma

Next we prove closure of Reduce under expansion. This follows the
handwritten proof, proceeding by induction on the type A which is an
implicit argument. In the base case we appeal to `halts_step`, while
in the `Arr` case we must also appeal to the induction hypothesis at
the range type, going inside the function position of applications.
}%

rec bwd_closed' : {A:[|- tp]}{M:[|- tm A]}{M':[|- tm A]}{S:[ |- step M M']} Reduce [|- A] [ |- M'] -> Reduce [|- A] [ |- M] =
/ total a (bwd_closed' a) /
 mlam A, M, M' => mlam MS => fn r => case [|- A] of 
| [|- b] => let I ha = r in I (halts_step [ |- MS] ha)
| [|- arr A B] => 
  let Arr ha f = r in
    Arr (halts_step [ |- MS] ha)
	(mlam N => fn rn =>
	 bwd_closed' [|- B] [|- _ ] [|- _ ] [ |- stepapp MS] (f [ |- N] rn))
;

rec bwd_closed : {S:[ |- step M M']} Reduce [|- A] [ |- M'] -> Reduce [|- A] [ |- M] = 
/ total (bwd_closed) /
mlam S => fn r => 
let [|- S] : [|- step M M'] = [|- S] in 
let [|- M] : [|- tm A]    = [|- M] in
  bwd_closed' [|- A ] [|- M ] [|- M' ]  [|- S] r;


%{
The trivial fact that reducible terms halt has a corresponding
trivial proof, analyzing the construction of the the proof of 
'Reduce[|- T] [|- M]'
}%

rec reduce_halts : Reduce [|- T] [ |- M] -> [ |- halts M] =
/ total (reduce_halts) /
fn r => case r of
| I h => h
| Arr h f => h
;

% ---------------------------------------------------------- %
% FUNDAMENTAL LEMMA

% Reducibility of substitutions

schema ctx = tm T;

inductive RedSub : {gamma:ctx}{#S:[ |- gamma]} ctype =
| Nil : RedSub  [ ] [ |- ^ ]
| Dot : RedSub  [gamma] [ |- #S[^] ] → Reduce [|- A] [ |- M]
     → RedSub [gamma, x:tm A[]] [ |- #S[^], M ] 
;


rec lookup : {gamma:ctx}{#p:[gamma |- tm A[]]}RedSub [gamma] [ |- #S[^]] -> Reduce [|- A] [|- #p[#S]] =
/ total gamma (lookup gamma) / 
mlam gamma => mlam #p => fn rs => case [gamma] of 
| [] => impossible [ |- #p]
| [gamma', x:tm A] => (case [gamma', x:tm A |- #p] of
 | [gamma',x:tm A |-  x] =>    let (Dot rs' rN) = rs in rN
 | [gamma',x:tm A |-  #q[..]] => let Dot rs' rN = rs in
                      lookup [gamma'] [gamma' |- #q] rs')
;

% Fundamental Lemma
rec main : {gamma:ctx}{M:[gamma |- tm A[]]} 
          RedSub [gamma] [ |- #S[^]] -> Reduce [|- A] [|- M[#S]] =
/ total m (main gamma a s m) /
mlam gamma, M => fn rs => case [gamma |- M] of
| [gamma |- #p] =>  lookup [gamma] [gamma |- #p] rs
| [gamma |- lam \x. M] => 
 Arr [ |- halts/m refl val/lam]
   (mlam N => fn rN =>
    bwd_closed [ |- beta] (main [gamma,x:tm _] [gamma,x |- M] (Dot rs rN)))

| [gamma |- app M1 M2] => 
  let Arr ha f = main [gamma] [gamma |- M1] rs in
  f [ |- _ ] (main [gamma] [gamma |- M2] rs)
| [gamma |-  c] =>  I [ |- halts/m refl val/c]
;

% Main Theorem: Well-typed terms halt
rec weakNorm : {M:[ |- tm A]} [ |- halts M] =
/ total (weakNorm) /
mlam M => reduce_halts (main [] [ |- M] Nil);
