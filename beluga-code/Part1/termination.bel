%{
  CH 3: Encoding Proofs by Induction
  CH 3.3: Termination
  Author: Brigitte Pientka

}%


% ----------------------------------------------------------------------------
% LEMMAS
% Type preservation for multi-steps 
rec multi_tps : [|- hastype M T] -> [|- multi_step M M'] -> [|- hastype M' T] = 
/ total s (multi_tps m t m' d s)/
fn d => fn s => case s of 
| [|- ms_ref] => d
| [|- ms_tr S1 S2] =>
  let d1 = multi_tps d  [|- S1] in 
   multi_tps d1 [|- S2]
| [|- ms_step S] => tps d [|- S] 
;


%{
Lemma: IF multi-step T T' THEN multi-step (if_then_else T T2 T3) (if_then_else T' T2 T3).
}%

rec mstep_if_then_else :
  {T2:[ |- term]}{T3:[ |- term]}
  [ |- multi_step T T'] ->
  [ |- multi_step (if_then_else T T2 T3) (if_then_else T' T2 T3)] =
/ total ms (mstep_if_then_else _ _ _ _ ms)/
mlam T2 => mlam T3 =>
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
  [ |- ms_step (e_if_then_else S)]

| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_if_then_else [ |- T2 ] [ |- T3 ] [ |- MS1] in
  let [ |- MS2'] = mstep_if_then_else [ |- T2 ] [ |- T3 ] [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

%{
Lemma: IF multi-step T T' THEN multi-step (succ T) (succ T').
}%

rec mstep_succ :
 [ |- multi_step M M'] -> [ |- multi_step (succ M) (succ M') ] =
/ total ms (mstep_succ m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_succ S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_succ [ |- MS1] in
  let [ |- MS2'] = mstep_succ [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

%{
Lemma: IF multi-step T T' THEN multi-step (pred T) (pred T').
}%


rec mstep_pred :
  [ |- multi_step M M'] -> [ |- multi_step (pred M) (pred M')] =
/ total ms (mstep_pred m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_pred S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_pred [ |- MS1] in
  let [ |- MS2'] = mstep_pred [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;


%{
Lemma: IF multi-step T T' THEN multi-step (pred T) (pred T').
}%


rec mstep_iszero :
  [ |- multi_step M M'] -> [ |- multi_step (iszero M) (iszero M')] =
/ total ms (mstep_iszero m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_iszero S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_iszero [ |- MS1] in
  let [ |- MS2'] = mstep_iszero [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

% ----------------------------------------------------------------------------
%{

 MAIN THEOREM:

 For every well-typed term, there exists an evaluation sequence  which leads to
 a value, i.e. no term will get stuck.

}%

LF steps_to_val: term -> type = 
| result: multi_step T T' -> value T'
       -> steps_to_val T;


rec terminate : [|- hastype M T] -> [ |- steps_to_val M] =
/ total d (terminate m t d)/
fn d => case d of 
| [ |- t_true] => [ |- result ms_ref v_true]

| [ |- t_false] => [ |- result ms_ref v_false]

| [ |- t_if D D1 D2] =>
  let d : [|- hastype (if_then_else M M1 M2) T] = d in
  (case terminate [ |- D ] of 
   | [ |- result MS v_true] =>
       let [ |- result MS1 V1] = terminate [ |- D1 ] in
       let [ |- MS']           = mstep_if_then_else [ |- M1 ] [ |- M2 ] [ |- MS] in
       [ |- result (ms_tr MS' (ms_tr (ms_step e_if_true) MS1)) V1]

   | [ |- result MS v_false] =>
       let [ |- result MS2 V2] = terminate [ |- D2 ] in
       let [ |- MS']           = mstep_if_then_else [ |- M1 ] [ |- M2 ] [ |- MS] in
       [ |- result (ms_tr MS' (ms_tr (ms_step e_if_false) MS2)) V2]
   | [ |- result MS v_zero]      => impossible multi_tps [|- D] [|- MS] in []
   | [ |- result MS (v_succ V)] => impossible multi_tps [|- D] [|- MS] in []
  )

| [ |- t_zero] => [ |- result ms_ref v_zero]

| [ |- t_succ D] =>
  (case terminate [ |- D] of 
   | [|- result MS v_true]  => impossible multi_tps [|- D] [|- MS] in []
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS] in [] 
   | [ |- result MS V] => 
     let [ |- MS']         = mstep_succ [ |- MS] in
     [ |- result MS' (v_succ V)]    
 )

| [ |- t_pred D]       =>
  (case terminate [ |- D ] of
   | [ |- result MS v_zero] =>
     let [ |- MS']         = mstep_pred [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_pred_zero))) v_zero]
   | [ |- result MS (v_succ V)] =>
     let [ |- MS']         = mstep_pred [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_pred_succ V))) V]
   | [ |- result MS v_true] => impossible multi_tps [|- D] [|- MS] in []
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS] in []
 )

| [|- t_iszero D] => 
  (case terminate [|- D] of 
   | [ |- result MS v_zero] =>
     let [ |- MS']         = mstep_iszero [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_iszero_zero))) v_true]
   | [ |- result MS (v_succ V)] =>
     let [ |- MS']         = mstep_iszero [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_iszero_succ V))) v_false]

   | [ |- result MS v_true] => impossible multi_tps [|- D] [|- MS] in []
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS] in []
  )
;


